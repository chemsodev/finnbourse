"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import { useTranslations } from "next-intl";
import { TCCService } from "@/lib/services/tccService";
import { Button } from "@/components/ui/button";
import UserForm, { UserFormValues } from "@/components/tcc/UserForm";

export default function EditTCCUserPage({
  params,
}: {
  params: { userId: string; locale: string };
}) {
  const router = useRouter();
  const t = useTranslations("TCCPage");
  const { toast } = useToast();
  const userId = params.userId;
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<Partial<UserFormValues> | null>(null);

  // Fetch user data on component mount
  useEffect(() => {
    async function fetchUserData() {
      try {
        setLoading(true);

        // Sample user data - in production this would be loaded from the API
        // This is just for demonstration, you should replace this with actual API call
        setTimeout(() => {
          setUser({
            firstname: "John",
            lastname: "Doe",
            email: "john.doe@example.com",
            password: "********", // Never send actual password back to client
            telephone: "123-456-7890",
            positionTcc: "Manager",
            matricule: "EMP12345",
            organisationIndividu: "Sample Org",
            role: ["tcc_admin", "client_account_manager_1"],
            status: "actif"
          });
          setLoading(false);
        }, 500);

        // In a real implementation:
        // const userData = await TCCService.getUserById(userId);
        // setUser(userData);
        // setLoading(false);
      } catch (error) {
        console.error("Error fetching user data:", error);
        toast({
          title: t("error"),
          description: t("failedToLoadUserData"),
          variant: "destructive",
        });
        setLoading(false);
      }
    }

    fetchUserData();
  }, [userId, t, toast]);

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="outline"
            size="icon"
            onClick={() => router.push(`/${params.locale}/tcc`)}
          >
            <span className="sr-only">Back</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4"><path d="m15 18-6-6 6-6"></path></svg>
          </Button>
          <div className="flex-1">
            <h1 className="text-3xl font-bold text-gray-800">
              {t("loadingUser")}
            </h1>
          </div>
        </div>
        <div className="h-96 flex items-center justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="outline"
            size="icon"
            onClick={() => router.push(`/${params.locale}/tcc`)}
          >
            <span className="sr-only">Back</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4"><path d="m15 18-6-6 6-6"></path></svg>
          </Button>
          <div className="flex-1">
            <h1 className="text-3xl font-bold text-gray-800">
              {t("userNotFound")}
            </h1>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm p-6 text-center">
          <p className="text-lg text-gray-600">{t("userNotFoundDescription")}</p>
          <Button
            className="mt-4"
            onClick={() => router.push(`/${params.locale}/tcc`)}
          >
            {t("backToUsers")}
          </Button>
        </div>
      </div>
    );
  }

  return (
    <UserForm
      initialValues={user}
      userId={userId}
      isEditMode={true}
      locale={params.locale}
    />
  );
}
